name: Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  IMAGE_NAME: openstudio-cmake-tools

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.arch == 'amd64' && 'ubuntu-latest' || matrix.arch == 'arm64' && 'ubuntu-24.04-arm' }}
    strategy:
      fail-fast: false
      matrix:
        name: [focal-amd64, focal-arm64, jammy-amd64, jammy-arm64, noble-amd64, noble-arm64]
        include:
        - name: focal-amd64
          arch: amd64
          VARIANT: focal
          other_name: ubuntu-20.04
          # GCC_VER: "9"
        - name: focal-arm64
          arch: arm64
          VARIANT: focal
          other_name: ubuntu-20.04
          # GCC_VER: "9"
        - name: jammy-amd64
          arch: amd64
          VARIANT: jammy
          other_name: ubuntu-22.04
          # GCC_VER: "11"
        - name: jammy-arm64
          arch: arm64
          VARIANT: jammy
          other_name: ubuntu-22.04
          # GCC_VER: "11"
        - name: noble-amd64
          arch: amd64
          VARIANT: noble
          other_name: ubuntu-24.04
          # GCC_VER: "11"
        - name: noble-arm64
          arch: arm64
          VARIANT: noble
          other_name: ubuntu-24.04
          # GCC_VER: "11"

    steps:

    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get Registry image from lower case owner name
      run: |
        echo "REGISTRY_IMAGE=${GITHUB_REPOSITORY_OWNER,,}/${{ env.IMAGE_NAME }}" >>${GITHUB_ENV}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_IMAGE }}

    - name: Debug
      run: |
        ls -la
        find . -name Dockerfile

    - name: Build and push Docker Image by digest
      # The outputs are configured to push the image by digest, which allows for better caching and versioning.
      # The cache-from and cache-to options are used to enable caching for the build process.
      # The cache is stored in GitHub Actions cache and is scoped to the repository, branch, and platform.
      uses: docker/build-push-action@v6
      id: build
      with:
        context: .
        platforms: linux/${{ matrix.arch }}
        build-args: |
          VARIANT=${{ matrix.VARIANT }}
          GCC_VER=${{ matrix.GCC_VER }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ env.REGISTRY_IMAGE }}
        annotations: ${{ steps.meta.outputs.annotations }}
        outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true,oci-mediatypes=true
        cache-from: type=gha,scope=${{ github.repository }}-${{ github.ref_name }}-${{ matrix.name }}
        cache-to: type=gha,scope=${{ github.repository }}-${{ github.ref_name }}-${{ matrix.name }}

    - name: Export digest
      # This step exports the digest of the built image to a file.
      # It creates a directory in /tmp/digests and saves the digest of the image to a file.
      # The digest is obtained from the output of the build step.
      # The digest is used to uniquely identify the built image and can be used for further processing or verification.
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${digest#sha256:}"

    - name: Upload digest
      # This step uploads the digest file to the GitHub Actions artifact storage.
      # It uses the actions/upload-artifact action to upload the file created in the previous step.
      # The artifact is named digests-${{ env.PLATFORM_PAIR }}, where PLATFORM_PAIR is the platform name with '/' replaced by '-'.
      # The artifact is retained for 1 day, and if no files are found, it will throw an error.
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ matrix.VARIANT }}-${{ matrix.arch }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

  build-fat-image:
    name: Build and Push Multi-Arch
    runs-on: ubuntu-latest  # Can only run on x86_64 runners
    needs: build
    strategy:
      fail-fast: false
      matrix:
        VARIANT: [focal, jammy, noble]
        include:
        - VARIANT: focal
          other_name: ubuntu-20.04
        - VARIANT: jammy
          other_name: ubuntu-22.04
        - VARIANT: noble
          other_name: ubuntu-24.04
    steps:

    - name: Download digests
      # This step downloads the digest files uploaded in the build job.
      # It uses the actions/download-artifact action to download the artifacts with the pattern digests-*.
      # The downloaded files are merged into the /tmp/digests directory.
      uses: actions/download-artifact@v4
      with:
        path: /tmp/digests
        pattern: digests-${{ matrix.VARIANT }}-*
        merge-multiple: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get Registry image from lower case owner name
      run: |
        echo "REGISTRY_IMAGE=${GITHUB_REPOSITORY_OWNER,,}/${{ env.IMAGE_NAME }}" >>${GITHUB_ENV}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_IMAGE }}
        tags: |
          ${{ matrix.VARIANT }}
          ${{ matrix.other_name }}
          type=semver,pattern={{version}},prefix=${{ matrix.VARIANT }}-
          type=semver,pattern={{major}}.{{minor}},prefix=${{ matrix.VARIANT }}-
          type=semver,pattern={{major}},prefix=${{ matrix.VARIANT }}-
          type=semver,pattern={{version}},prefix=${{ matrix.other_name }}-
          type=semver,pattern={{major}}.{{minor}},prefix=${{ matrix.other_name }}-
          type=semver,pattern={{major}},prefix=${{ matrix.other_name }}-
          type=raw,value=main,enable=${{ github.ref_name == 'main' }},prefix=${{ matrix.VARIANT }}-
          type=raw,value=latest,enable=${{ github.ref_name == 'main' }},prefix=${{ matrix.VARIANT }}-

    - name: Get execution timestamp with RFC3339 format
      # This step gets the current execution timestamp in RFC3339 format.
      # It uses the date command to get the current UTC time and formats it as a string.
      # The timestamp is used for annotating the Docker manifest list.
      id: timestamp
      run: |
        echo "timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT

    - name: Create manifest list and push
      working-directory: /tmp/digests
      run: |
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

    - name: Inspect image
      run: |
        docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
